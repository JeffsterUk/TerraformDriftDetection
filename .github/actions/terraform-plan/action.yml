name: 'Terraform Plan'
description: 'Execute Terraform plan with Artifact Upload, Summary Generation, and Issue Creation'
inputs:
  working_directory:
    description: 'Working directory containing Terraform files'
    required: true
  summary_title_prefix:
    description: 'Prefix for the summary title (e.g., "Initial Plan" or "Post-Apply Validation")'
    required: false
    default: 'Terraform Plan'
  enable_artifact_upload:
    description: 'Whether to upload Terraform code and plan as artifact when changes detected'
    required: false
    default: 'true'
  task_tdd_title:
    description: 'Title for the Terraform Drift Detection task'
    required: false
    default: 'Terraform Drift Detected'

outputs:
  changes:
    description: 'Whether changes were detected (true/false)'
    value: ${{ steps.plan.outputs.changes }}
  exitcode:
    description: 'Terraform plan exit code'
    value: ${{ steps.plan.outputs.exitcode }}
  plan-brief:
    description: 'Brief plan output (escaped for safe passage)'
    value: ${{ steps.summary.outputs.plan-brief }}

runs:
  using: "composite"
  steps:
    - name: Terraform Plan
      id: plan
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |        
        # Clean up any existing plan files from previous runs
        echo "Cleaning up existing plan files..."
        rm -f plan_output.txt terraform.tfplan
        
        # Execute plan and capture output
        echo "Running terraform plan..."
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out terraform.tfplan > plan_output.txt 2>&1 || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

        if [ $exitcode -eq 1 ]; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "‚ùå Terraform Plan Failed!"
          cat plan_output.txt
          exit 1
        elif [ $exitcode -eq 2 ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Changes detected - drift found!"
          cat plan_output.txt
          exit 0
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "‚úÖ No changes detected"
          cat plan_output.txt
          exit 0
        fi

    - name: List workspace contents
      shell: bash
      run: |
        echo "Listing all files and folders recursively in ${{ github.workspace }}"
        ls -alR "${{ github.workspace }}"

    - name: Upload Terraform Code & Plan
      if: steps.plan.outputs.changes == 'true' && inputs.enable_artifact_upload == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: Terraform
        path: ${{ github.workspace }}/.github
        retention-days: 30
        if-no-files-found: warn

    - name: Add Plan Results to Summary
      id: summary
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const changesPresent = '${{ steps.plan.outputs.changes }}';
          const planOutputPath = path.join('${{ inputs.working_directory }}', 'plan_output.txt');
          const titlePrefix = '${{ inputs.summary_title_prefix }}';
          
          // Helper function to extract plan sections
          function extractPlanSections(planContent) {
            const lines = planContent.split('\n');
            let briefLines = [], fullLines = [], capturing = false;
            
            for (const line of lines) {
              if (line.includes('Terraform will perform the following actions:')) {
                briefLines.push(line);
                fullLines.push(line);
                capturing = true;
              } else if (capturing) {
                fullLines.push(line);
                if (line.startsWith('  # ')) briefLines.push(line);
                if (line.startsWith('Plan: ')) {
                  if (!briefLines.includes(line)) briefLines.push('', line);
                  break;
                }
              }
            }
            
            return {
              brief: briefLines.length ? briefLines.join('\n') : '',
              briefFormatted: briefLines.length ? '\n```\n' + briefLines.join('\n') + '\n```' : '',
              full: fullLines.length ? '\n```\n' + fullLines.join('\n') + '\n```' : ''
            };
          }
          
          let planBrief = '';
          
          // Generate summary content
          const statusMessage = changesPresent === 'true' ? 
            `‚ö†Ô∏è ${titlePrefix}: Changes Detected ‚ö†Ô∏è` : 
            `‚úÖ ${titlePrefix}: No Changes Detected`;
          let output = statusMessage + '\n\n';
          
          if (fs.existsSync(planOutputPath)) {
            const planContent = fs.readFileSync(planOutputPath, 'utf8');
            const { brief, briefFormatted, full } = extractPlanSections(planContent);
            
            planBrief = brief;
            
            const briefTitle = titlePrefix === 'Terraform Plan' ? 'Terraform Plan Results - Brief' : `${titlePrefix} Results - Brief`;
            const fullTitle = titlePrefix === 'Terraform Plan' ? 'Terraform Plan Results - Full' : `${titlePrefix} Results - Full`;
            
            if (briefFormatted) {
              const briefOpen = titlePrefix === 'Terraform Plan' ? 'open' : '';
              output += `<details ${briefOpen}>\n<summary><strong>${briefTitle}</strong></summary>\n${briefFormatted}\n</details>\n\n`;
            }
            if (full) output += `<details>\n<summary><strong>${fullTitle}</strong></summary>\n${full}\n</details>`;
          }
          
          // Set output for use in subsequent steps (escape for safe passage through GitHub Actions)
          const escapedPlanBrief = planBrief.replace(/\r?\n/g, '\\n').replace(/`/g, '\\`').replace(/\$/g, '\\$');
          core.setOutput('plan-brief', escapedPlanBrief);
          
          await core.summary.addRaw(output).write();
          console.log(`${titlePrefix} summary added with brief and full plan results`);

    - name: Create Issue for Drift Detection
      if: steps.plan.outputs.changes == 'true' && github.event_name != 'schedule' # TODO: Change back to '== schedule' after testing
      uses: actions/github-script@v7
      with:
        script: |
          const title = `${{ inputs.task_tdd_title }}`;
          
          // Get the plan brief from the previous step and unescape it
          const planBriefRaw = '${{ steps.summary.outputs.plan-brief }}';
          const planBrief = planBriefRaw.replace(/\\n/g, '\n').replace(/\\`/g, '`').replace(/\\\$/g, '$');
          const planSection = planBrief ? `\n<details>\n<summary><strong>Terraform Plan Summary</strong></summary>\n\n\`\`\`\n${planBrief}\n\`\`\`\n\n</details>\n` : '';
          
          const body = `
          ## Terraform Drift Detection Alert

          **Workflow:** ${{ github.workflow }}
          **Run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          **SHA:** ${{ github.sha }}

          ### Details
          Drift has been detected in the Terraform-managed infrastructure during the scheduled drift detection run.
          ${planSection}
          ### Next Steps
          1. Review the Terraform plan output in the workflow logs
          2. Investigate the cause of the drift
          3. Determine if changes should be applied or if manual intervention is required
          4. Run the workflow manually to apply changes with approval gate

          **This Task was Auto-generated by Terraform Drift Detection**
          `;

          // Check for existing open drift detection issues with the same title
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            per_page: 100
          });

          const existingIssue = existingIssues.data.find(issue => 
            issue.title === title
          );

          if (!existingIssue) {
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['Workflow-Generated', 'Terraform-Drift-Detection'],
              type: 'Task'
            });
            
            console.log(`Created issue: ${issue.data.html_url}`);
          } else {
            // Update existing issue with new run information including plan brief
            const commentPlanSection = planBrief ? `\n\n<details>\n<summary><strong>Terraform Plan Summary</strong></summary>\n\n\`\`\`\n${planBrief}\n\`\`\`\n\n</details>` : '';
            
            const commentBody = [
              'üîÑ **Additional drift detected**',
              '',
              '**Workflow:** ${{ github.workflow }}',
              '**Run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})',
              '**SHA:** ${{ github.sha }}' + commentPlanSection
            ].join('\n');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: commentBody
            });
            
            console.log(`Updated existing issue: ${existingIssue.html_url}`);
          }