# ------------------------------------------------------------------------------------ #
#
#   GitHub Actions Workflow to deploy the infrastructure and detect drift
#
# ------------------------------------------------------------------------------------ #

name: Poc - Terraform Drift Detection

on:
  schedule:
    # Run at 3am Monday-Friday (UTC)
    - cron: "0 3 * * 1-5"
  workflow_dispatch:
  push:
    branches-ignore:
      - main

env:
  TERRAFORM_VERSION: ${{ vars.TERRAFORM_VERSION }}
  WORKING_DIRECTORY: ${{ vars.WORKING_DIRECTORY }}
  ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  TF_STATE_STORAGE_ACCOUNT: ${{ vars.TF_STATE_STORAGE_ACCOUNT }}
  TF_STATE_CONTAINER: ${{ vars.TF_STATE_CONTAINER }}
  TF_STATE_KEY: ${{ vars.TF_STATE_KEY }}
  TASK_TDD_TITLE: 'POC TDD: Terraform Drift Detected'

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: Production-Plan
    permissions: # TODO: Improve understanding
      id-token: write
      contents: read
      pull-requests: write
      issues: write
      repository-projects: write
    outputs:
      changes-present: ${{ steps.plan.outputs.changes }}
      plan-exitcode: ${{ steps.plan.outputs.exitcode }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ env.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ env.TF_STATE_CONTAINER }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}"

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out terraform.tfplan > plan_output.txt 2>&1 || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "Terraform Plan Failed!"
            cat plan_output.txt
            exit 1
          elif [ $exitcode -eq 2 ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected - drift found!"
            cat plan_output.txt
            exit 0
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
            cat plan_output.txt
            exit 0
          fi
        continue-on-error: true

      - name: Upload Terraform Code & Plan
        if: steps.plan.outputs.changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: Terraform
          path: ${{ env.WORKING_DIRECTORY }}
          retention-days: 30

      - name: Add Plan Results to Summary
        id: summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const changesPresent = '${{ steps.plan.outputs.changes }}';
            const planOutputPath = path.join('${{ env.WORKING_DIRECTORY }}', 'plan_output.txt');
            
            // Helper function to extract plan sections
            function extractPlanSections(planContent) {
              const lines = planContent.split('\n');
              let briefLines = [], fullLines = [], capturing = false;
              
              for (const line of lines) {
                if (line.includes('Terraform will perform the following actions:')) {
                  briefLines.push(line);
                  fullLines.push(line);
                  capturing = true;
                } else if (capturing) {
                  fullLines.push(line);
                  if (line.startsWith('  # ')) briefLines.push(line);
                  if (line.startsWith('Plan: ')) {
                    if (!briefLines.includes(line)) briefLines.push('', line);
                    break;
                  }
                }
              }
              
              return {
                brief: briefLines.length ? briefLines.join('\n') : '',
                briefFormatted: briefLines.length ? '\n```\n' + briefLines.join('\n') + '\n```' : '',
                full: fullLines.length ? '\n```\n' + fullLines.join('\n') + '\n```' : ''
              };
            }
            
            let planBrief = '';
            
            // Generate summary content
            const statusMessage = changesPresent === 'true' ? '‚ö†Ô∏è Changes Detected ‚ö†Ô∏è' : '‚úÖ No Changes Detected.';
            let output = statusMessage + '\n\n';
            
            if (fs.existsSync(planOutputPath)) {
              const planContent = fs.readFileSync(planOutputPath, 'utf8');
              const { brief, briefFormatted, full } = extractPlanSections(planContent);
              
              planBrief = brief;
              
              if (briefFormatted) output += `<details open>\n<summary><strong>Terraform Plan Results - Brief</strong></summary>\n${briefFormatted}\n</details>\n\n`;
              if (full) output += `<details>\n<summary><strong>Terraform Plan Results - Full</strong></summary>\n${full}\n</details>`;
            }
            
            // Set output for use in subsequent steps (escape for safe passage through GitHub Actions)
            const escapedPlanBrief = planBrief.replace(/\r?\n/g, '\\n').replace(/`/g, '\\`').replace(/\$/g, '\\$');
            core.setOutput('plan-brief', escapedPlanBrief);
            
            await core.summary.addRaw(output).write();
            console.log('Summary added with brief and full plan results');

      - name: Create Issue for Drift Detection
        if: steps.plan.outputs.changes == 'true' && github.event_name != 'schedule' # TODO: Change back to '== schedule' after testing
        uses: actions/github-script@v7
        with:
          script: |
            const title = `${{ env.TASK_TDD_TITLE }}`;
            
            // Get the plan brief from the previous step and unescape it
            const planBriefRaw = '${{ steps.summary.outputs.plan-brief }}';
            const planBrief = planBriefRaw.replace(/\\n/g, '\n').replace(/\\`/g, '`').replace(/\\\$/g, '$');
            const planSection = planBrief ? `\n<details>\n<summary><strong>Terraform Plan Summary</strong></summary>\n\n\`\`\`\n${planBrief}\n\`\`\`\n\n</details>\n` : '';
            
            const body = `
            ## Terraform Drift Detection Alert

            **Workflow:** ${{ github.workflow }}
            **Run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **SHA:** ${{ github.sha }}

            ### Details
            Drift has been detected in the Terraform-managed infrastructure during the scheduled drift detection run.
            ${planSection}
            ### Next Steps
            1. Review the Terraform plan output in the workflow logs
            2. Investigate the cause of the drift
            3. Determine if changes should be applied or if manual intervention is required
            4. Run the workflow manually to apply changes with approval gate

            **This Task was Auto-generated by Terraform Drift Detection**
            `;

            // Check for existing open drift detection issues with the same title
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });

            const existingIssue = existingIssues.data.find(issue => 
              issue.title === title
            );

            if (!existingIssue) {
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['Workflow-Generated', 'Terraform-Drift-Detection'],
                type: 'Task'
              });
              
              console.log(`Created issue: ${issue.data.html_url}`);
            } else {
              // Update existing issue with new run information including plan brief
              const commentPlanSection = planBrief ? `\n\n<details>\n<summary><strong>Terraform Plan Summary</strong></summary>\n\n\`\`\`\n${planBrief}\n\`\`\`\n\n</details>` : '';
              
              const commentBody = [
                'üîÑ **Additional drift detected**',
                '',
                '**Workflow:** ${{ github.workflow }}',
                '**Run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})',
                '**SHA:** ${{ github.sha }}' + commentPlanSection
              ].join('\n');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: commentBody
              });
              
              console.log(`Updated existing issue: ${existingIssue.html_url}`);
            }

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: needs.terraform-plan.outputs.changes-present == 'true' && github.event_name == 'workflow_dispatch'
    environment: Production-Apply # TODO: Timeout Required?
    permissions: # TODO: Improve understanding
      id-token: write
      contents: read

    steps:
      - name: Download Terraform Code & Plan
        uses: actions/download-artifact@v4
        with:
          name: Terraform
          path: ${{ env.WORKING_DIRECTORY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ env.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ env.TF_STATE_CONTAINER }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}"

      - name: Terraform Apply
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform apply -auto-approve terraform.tfplan

  # post-apply-validation:
  #   name: Post-Apply Validation
  #   runs-on: ubuntu-latest
  #   needs: [terraform-plan, terraform-apply]
  #   if: always() && needs.terraform-apply.result == 'success'

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v3
  #     with:
  #       terraform_version: ${{ env.TERRAFORM_VERSION }}
  #       terraform_wrapper: false

  #   - name: Terraform Init
  #     run: terraform init

  #   - name: Terraform Plan (Validation)
  #     run: |
  #       echo "Running post-apply validation plan..."
  #       terraform plan -detailed-exitcode -no-color

  #       if [ $? -eq 0 ]; then
  #         echo "‚úÖ Validation successful: No drift detected after apply"
  #       elif [ $? -eq 2 ]; then
  #         echo "‚ö†Ô∏è Warning: Drift still detected after apply - manual review required"
  #         exit 1
  #       else
  #         echo "‚ùå Error: Plan failed"
  #         exit 1
  #       fi
